# scorecard_id_list = [426670, 426850, 427479, 427698, 428281, 428488, 429105, 429311, 429888, 430112, 432696, 426701, 426892, 427489, 427694, 428297, 428487, 429085, 429302, 429893, 430098, 426675, 427483, 427716, 428290, 428485, 429089, 429253, 430097, 432804, 426683, 426907, 427712, 428278, 428476, 429073, 429317, 429912, 426715, 426875, 427520, 427709, 428324, 429079, 429933, 430571, 430642, 432863, 426711, 426843, 427514, 427669, 428334, 428445, 429120, 429249, 429930, 430063, 426846, 427506, 427670, 428312, 428453, 429113, 429921, 430059, 430561, 430640, 432856, 439869, 439966, 439982, 440083, 440140, 426702, 426865, 427467, 427651, 428313, 428465, 429128, 429274, 429894, 430069, 432731, 439868, 426905, 427508, 427666, 428311, 428452, 429065, 429923, 430096, 426718, 426869, 427522, 428293, 429129, 429262, 429937, 430102, 430625, 426674, 426917, 427481, 427723, 428320, 428525, 429332, 429885, 430566, 430650, 432765, 426663, 427474, 427677, 428460, 429096, 429293, 430088, 430529, 432864, 439872, 426654, 426881, 427682, 428330, 429093, 429301, 429918, 426871, 427488, 427685, 428306, 429124, 429902, 430058, 432733, 426840, 427525, 428517, 429133, 429900, 430092, 426642, 426848, 427445, 427654, 428248, 428523, 429052, 429277, 429858, 430082, 430527, 432764, 426653, 426861, 427458, 427717, 428262, 428508, 429061, 429326, 429867, 430074, 426664, 426866, 427509, 427704, 428305, 429310, 429925, 430108, 430533, 426709, 426909, 427477, 427714, 428265, 428483, 429068, 429324, 429913, 430115, 432853, 439864, 439965, 440082, 440056, 426699, 426868, 427468, 427671, 428502, 429108, 429312, 429916, 430062, 430559, 426720, 426862, 427519, 427648, 428316, 428450, 429122, 429259, 429875, 430054, 430560, 426694, 426879, 427465, 427684, 428285, 428486, 429104, 429303, 429899, 430091, 426698, 426891, 427681, 428288, 428524, 429087, 429299, 429879, 430548, 430627, 426923, 427444, 427727, 428292, 428531, 429116, 429289, 429859, 430538, 430646, 426644, 426880, 427480, 427686, 428295, 428481, 429092, 429256, 429910, 430089, 432727, 426710, 426874, 427503, 427675, 428303, 428530, 429898, 430085, 430545, 432769, 439877, 440053, 440081, 439980, 440139, 440931, 440941, 440977, 426693, 426897, 427496, 427672, 428252, 428479, 429083, 429287, 430083, 426669, 427699, 428501, 429127, 429281, 430549, 426692, 426849, 427495, 427693, 428469, 429102, 429280, 430575, 426689, 426904, 427664, 428276, 428484, 429076, 429313, 429866, 430540, 430634, 426855, 427448, 427659, 428272, 428461, 429316, 430550, 426649, 427493, 427722, 428275, 429098, 429266, 430123, 430557, 430649, 432732, 426650, 426873, 427457, 427720, 428310, 428522, 429136, 429863, 430065, 426643, 427510, 427725, 428273, 428529, 429082, 430126, 430535, 430651, 426707, 427504, 427680, 428331, 428477, 429101, 429286, 430081, 432692, 440054, 440064, 440060, 440065, 427469, 427655, 428482, 429077, 430086, 430539, 439866, 439913, 439996, 440014, 440104, 426700, 426839, 427527, 427647, 428463, 429250, 429906, 430094, 432766, 426666, 427485, 427703, 428325, 428506, 429132, 429267, 430106, 430570, 430643, 432855, 439867, 426680, 426842, 427523, 427645, 428457, 429254, 429932, 430057, 430554, 426703, 426885, 427507, 428301, 428466, 429275, 429922, 430090, 430630, 426655, 426837, 427530, 428332, 428528, 429058, 429283, 429940, 430050, 432852, 426723, 426900, 427454, 427705, 428279, 428510, 429119, 429887, 430109, 432802, 427461, 427715, 428264, 428474, 429064, 429308, 429886, 426682, 426911, 427447, 427719, 428251, 428519, 429323, 429876, 430532, 430648, 432849, 426678, 426902, 427471, 427679, 428317, 428514, 429074, 429897, 430111, 430556, 426713, 427516, 428322, 429125, 429291, 430637, 432854, 426726, 426867, 427528, 428328, 428470, 429137, 429279, 430073, 432768, 439881, 439914, 439928, 439997, 426857, 427475, 428511, 429057, 429880, 430114, 440058, 440055, 440061, 426659, 428277, 428516, 429269, 430645, 426657, 427690, 428271, 428495, 429071, 429319, 432805, 439964, 440052, 440080, 426887, 427463, 427692, 428267, 429872, 430060, 426681, 426845, 427486, 429260, 429896, 432857, 426677, 427524, 429090, 429261, 430095, 426704, 426889, 427668, 428256, 429936, 430072, 430572, 432690, 426688, 426877, 428458, 429290, 429914, 432695, 426721, 426870, 427650, 428329, 428449, 429131, 429908, 430105, 426714, 426859, 427502, 427660, 428270, 428462, 429272, 430563, 426858, 427511, 427721, 428315, 428503, 429273, 426652, 426913, 427456, 427673, 428259, 428526, 429059, 429335, 429864, 430128, 432689, 426919, 427460, 428263, 428515, 429063, 429869, 430117, 430636, 426844, 427661, 428489, 429111, 429919, 426717, 427498, 428323, 429103, 429285, 430080, 439879, 439979, 440141, 426852, 427656, 428300, 429895, 430574, 430626, 426876, 428490, 429938, 426672, 426853, 427658, 428499, 429121, 429268, 429928, 430569, 426676, 426894, 427499, 427697, 428282, 429306, 429909, 430101, 430562, 426886, 427691, 428291, 428496, 429088, 429292, 430555, 432865, 439882, 426725, 427529, 427649, 428448, 429257, 429942, 432806, 426668, 427478, 428286, 428504, 429270, 430099, 430641, 432691, 439871, 439961, 439952, 440047, 440114, 426697, 426921, 427501, 427702, 429081, 430087, 427459, 427689, 428261, 429062, 430070, 430531, 430633, 432861, 426893, 427466, 427696, 428289, 428500, 429926, 430541, 430639, 426883, 428299, 429130, 429927, 427521, 428314, 428471, 429123, 429868, 430530, 426661, 427473, 427707, 429070, 429917, 430100, 432807, 428283, 429110, 429305, 429889, 426645, 426910, 427451, 430120, 430565, 439880, 439933, 440103, 440932, 440969, 428518, 429114, 429321, 430119, 440057, 440063, 440985, 428326, 428456, 429934, 427662, 429126, 429327, 426906, 427497, 428307, 428498, 429318, 429911, 426665, 426854, 428321, 429252, 429931, 430121, 430567, 426686, 428294, 429297, 427500, 428308, 430632, 426708, 426908, 427515, 427711, 428268, 428509, 429072, 429315, 430061, 430536, 432803, 439870, 440059, 439981, 427484, 428480, 429091, 429295, 429924, 430635, 426914, 428257, 429881, 430628, 429097, 439962, 439951, 440027, 426658, 426890, 427701, 429086, 429300, 429878, 430547, 432859, 439873, 426719, 428451, 429298, 426916, 427449, 428475, 429134, 429333, 429862, 426660, 428492, 429320, 430125, 426671, 426915, 427676, 428284, 429890, 430078, 427641, 428335, 429941, 430053, 426838, 429138, 426706, 428269, 428464, 429307, 430629, 427657, 430543, 427526, 428258, 429099, 429309, 432801, 426656, 426888, 427462, 427642, 428266, 428447, 429067, 429288, 429871, 430084, 432767, 439875, 440011, 426690, 426872, 427494, 427646, 428497, 429100, 429251, 429907, 426851, 429904, 427517, 427643, 428309, 428446, 429069, 430051, 432728, 427652, 428327, 430573, 430631, 426847, 429935, 428473, 426864, 427492, 427683, 429905, 430552, 439874, 440066, 426716, 426903, 427663, 428253, 428455, 429056, 429264, 429901, 430542, 426679, 429054, 430075, 426712, 426882, 427706, 428319, 428513, 429929, 430068, 430568, 427487, 428468, 429078, 429278, 429920, 430071, 430537, 432729, 427512, 427665, 428467, 429276, 430110, 427452, 427708, 428255, 429094, 429882, 426856, 427513, 429117, 429891, 430064, 426648, 426901, 427453, 428296, 426673, 427710, 429084, 430113, 432694, 440142, 427678, 429095, 429334, 429903, 426646, 426896, 427476, 427700, 430544, 426895, 427470, 429874, 430103, 432858, 440046, 440113, 426696, 426918, 427446, 428260, 428527, 429106, 429284, 430079, 432763, 439861, 426899, 427653, 428454, 429939, 427695, 428318, 430546, 430638, 429265, 429873, 430076, 430534, 439863, 426647, 429329, 429861, 426662, 426912, 427718, 429060, 429322, 429857, 430528, 426722, 427644, 429282, 430118, 429075, 426687, 427688, 429107, 429271, 430067, 432866, 426884, 427491, 429915, 430553, 426641, 427455, 427726, 428520, 429331, 429865, 440026, 426651, 428280, 429860, 430124, 428254, 429109, 429328, 426898, 428521, 429080, 429883, 428459, 427482, 427674, 428287, 429255, 429892, 430052, 429115, 430551, 426685, 428494, 429296, 432860, 428505, 429884, 439876, 426724, 428304, 428478, 430056, 427450, 429112, 426920, 430558, 430122, 426667, 430104, 439963, 427490, 430055, 426691, 428302, 430077, 428493, 426695, 428507, 429263, 426684, 426878, 427667, 429294, 429870, 432730, 429118, 427505, 428472, 430116, 427472, 427687, 428491, 430093, 430526, 426705, 427464, 427713, 428512, 429066, 429877, 430066, 426860, 428274, 430564, 432814, 428298, 439878, 427518, 430107, 426841, 429135, 432693, 428249, 429055, 432848, 427724, 428250, 429856, 430127, 426640, 429330, 426922, 429053]
scorecard_id_list = [447267, 447259, 430127]

import requests
import bs4
import re

matches_sql_exp = 'INSERT INTO matches (id, scorecard_id, match_type, line, h_1_player_id, h_1_player_name, h_2_player_id, h_2_player_name, v_1_player_id, v_1_player_name, v_2_player_id, v_2_player_name, winning_score, winner) VALUES'
   
url = 'https://www.ustanorcal.com/scorecard.asp?id='


match_ids = []
pattern = re.compile(r'playermatches.asp\?id=')

for scorecard_id in scorecard_id_list:
  print(scorecard_id)
  if(scorecard_id == 447259):
    continue

  curr_url = url + str(scorecard_id)
  data = requests.get(curr_url)
  soup = bs4.BeautifulSoup(data.text, "html.parser")

  singles_table = None
  doubles_table = None
  rules_violation = False
  if soup.find(text=re.compile(r'Rules Violation')):
    rules_violation = True
    continue

  #selects all tables from the page
  tables = soup.select("table")
  for table in tables:
    if table.find('b', text=re.compile(r'Singles')):
      singles_table = table
    elif table.find('b', text=re.compile(r'Doubles')):
      doubles_table = table

  if singles_table is not None:
    next_s_table = singles_table.next_sibling
    all_rows = next_s_table.findAll('tr')
    del all_rows[0:2]
    for match_row in all_rows:
      tds = match_row.findAll('td')
      line = int(match_row.find('font').text)

      player_as = match_row.findAll('a')

      winner = tds[4].text
      if tds[5].text == "DD":
        h_1_player_id = 'null'
        h_1_player_name = ''
        v_1_player_id = 'null'
        v_1_player_name = ''
      elif tds[5].text == "DF":
        if winner == "Home":
          h_1_player_name = player_as[0].text.rstrip()
          player_1_href = player_as[0]['href']
          h_1_player_id = re.match('.*?([0-9]+)$', player_1_href).group(1)
        elif winner == "Visitor":
          v_1_player_name = player_as[0].text.rstrip()
          player_2_href = player_as[0]['href']
          v_1_player_id = re.match('.*?([0-9]+)$', player_2_href).group(1)
      else:
        h_1_player_name = player_as[0].text.rstrip()
        v_1_player_name = player_as[1].text.rstrip()

        player_1_href = player_as[0]['href']
        h_1_player_id = re.match('.*?([0-9]+)$', player_1_href).group(1)
        player_2_href = player_as[1]['href']
        v_1_player_id = re.match('.*?([0-9]+)$', player_2_href).group(1)

      winning_score = tds[3].text
      h_2_player_id = 'null'
      h_2_player_name = ''
      v_2_player_id = 'null'
      v_2_player_name = ''
      match_type = 'singles'

      # SINCE INSERTING INTO SQL replace any single apostrophes with double single apostrophes  
      h_1_player_name = h_1_player_name.replace("'", "''")
      v_1_player_name = v_1_player_name.replace("'", "''")

      if matches_sql_exp[-6:] != 'VALUES':
        matches_sql_exp += ','

      match_id = str(scorecard_id) + "1" + str(line)
      match_ids.append(match_id)

      matches_sql_exp += " ({}, {}, '{}', {}, {}, '{}', {}, '{}', {}, '{}', {}, '{}', '{}', '{}')".format(match_id, scorecard_id, match_type, line, h_1_player_id, h_1_player_name, h_2_player_id, h_2_player_name, v_1_player_id, v_1_player_name, v_2_player_id, v_2_player_name, winning_score, winner)

  #still need player_ids and id!

  if doubles_table is not None:
    next_d_table = doubles_table.next_sibling
    all_rows = next_d_table.findAll('tr')
    del all_rows[0:2]
    for match_row in all_rows:
      tds = match_row.findAll('td')
      line = int(match_row.find('font').text)
      player_as = match_row.findAll('a')

      winner = tds[4].text

      if tds[5].text == "DD":
        h_1_player_id = 'null'
        h_1_player_name = ''
        v_1_player_id = 'null'
        v_1_player_name = ''
        h_2_player_id = 'null'
        h_2_player_name = ''
        v_2_player_id = 'null'
        v_2_player_name = ''


      elif tds[5].text == "DF":
        if winner == "Home":
          h_1_player_name = player_as[0].text.rstrip()
          h_2_player_name = player_as[1].text.rstrip()

          player_1_href = player_as[0]['href']
          h_1_player_id = re.match('.*?([0-9]+)$', player_1_href).group(1)
          player_2_href = player_as[1]['href']
          h_2_player_id = re.match('.*?([0-9]+)$', player_2_href).group(1)
        elif winner == "Visitor":
          v_1_player_name = player_as[0].text.rstrip()
          v_2_player_name = player_as[1].text.rstrip()

          player_3_href = player_as[0]['href']
          v_1_player_id = re.match('.*?([0-9]+)$', player_3_href).group(1)
          player_4_href = player_as[1]['href']
          v_2_player_id = re.match('.*?([0-9]+)$', player_4_href).group(1)
      else:    
        h_1_player_name = player_as[0].text.rstrip()
        h_2_player_name = player_as[1].text.rstrip()
        v_1_player_name = player_as[2].text.rstrip()
        v_2_player_name = player_as[3].text.rstrip()

        player_1_href = player_as[0]['href']
        h_1_player_id = re.match('.*?([0-9]+)$', player_1_href).group(1)
        player_2_href = player_as[1]['href']
        h_2_player_id = re.match('.*?([0-9]+)$', player_2_href).group(1)
        player_3_href = player_as[2]['href']
        v_1_player_id = re.match('.*?([0-9]+)$', player_3_href).group(1)
        player_4_href = player_as[3]['href']
        v_2_player_id = re.match('.*?([0-9]+)$', player_4_href).group(1)

      winning_score = tds[3].text
      match_type = 'doubles'

      # SINCE INSERTING INTO SQL replace any single apostrophes with double single apostrophes  
      h_1_player_name = h_1_player_name.replace("'", "''")
      h_2_player_name = h_2_player_name.replace("'", "''")
      v_1_player_name = v_1_player_name.replace("'", "''")
      v_2_player_name = v_2_player_name.replace("'", "''")

      if matches_sql_exp[-6:] != 'VALUES':
        matches_sql_exp += ','

      match_id = str(scorecard_id) + "2" + str(line)
      match_ids.append(match_id)

      matches_sql_exp += " ({}, {}, '{}', {}, {}, '{}', {}, '{}', {}, '{}', {}, '{}', '{}', '{}')".format(match_id, scorecard_id, match_type, line, h_1_player_id, h_1_player_name, h_2_player_id, h_2_player_name, v_1_player_id, v_1_player_name, v_2_player_id, v_2_player_name, winning_score, winner)


matches_sql_exp += ";"

with open('matches.sql', 'w') as file:
  file.write(matches_sql_exp)
file.close()

print(match_ids)
print(matches_sql_exp)